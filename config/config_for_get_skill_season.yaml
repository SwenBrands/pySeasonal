---

# Configuration for get_skill_season
# Converted from config_for_get_skill_season.py

#set path to input gcm files
paths:
  lustre:
    home: '/lustre/gmeteo/PTICLIMA'
    rundir: '/lustre/gmeteo/PTICLIMA/Scripts/SBrands/pyPTIclima/pySeasonal'
    path_obs_base: '/lustre/gmeteo/PTICLIMA/Results/seasonal/obs/regridded'
    path_gcm_base: '/lustre/gmeteo/PTICLIMA/Results/seasonal/gcm/aggregated' 
    dir_netcdf: '/lustre/gmeteo/PTICLIMA/Results/seasonal/validation/'
    dir_telcon: '/lustre/gmeteo/PTICLIMA/Results/seasonal/indices' #directory of the netCDF file containing the phases of known teleconnection indices; currently ENSO only, as generated with oni2enso.py
    filename_telcon: 'oni2enso_195001_202505.nc' #name of the file located in <dir_telcon>
    mask_dir: '/lustre/gmeteo/PTICLIMA/Auxiliary-material/Masks' # path to the land-sea masks on lustre
    
# Input parameters for get_skill_season.py
input_parameters:
  obs: ['era5'] # list of observational datasets used as reference for verification. Currently, only ERA5 is admitted, i.e. the list has a single item.
  years_obs: [1981, 2022] # years used in label of obs netCDF file; if they differ from <years_model>, then the common intersection of years will be validated.
  modulator_ref: 'init' # init or valid; the time instance the modulation in valid for. If set to 'init', then the time series are modulated with the teleconnection index valid at the initalization month. If set to 'valid', they are modulated with the index valid at the time the forecast is valid.
  min_nr_events: 3 # the minimum number of events that must be reached for each modulator and events to permit the verification; if this threshold is not reached, the script returns a ValueError
  years_quantile: [1993, 2022] # start and end years of the time series used to calculate the quantiles from obserations and model data
  precision: 'float32' # data type of the variables in the output netcdf files
  compression_level: 1
  precip_threshold: 0.03333333333333333 # 1/30; monthly mean daily precipitation threshold in mm below which the modelled and quasi-observed monthly precipitation amount is set to 0; Bring the parameter in pred2tercile.py in exact agreement with this script in future versions
  bin_edges_reliability: null # probability edges used to calculate the reliability, either <None> in which case the default of xs.reliability() is used (currently 5 bins) or, which should return the same, manually pass 5 bins with np.linspace(0, 1, 6); or 3 bins with np.linspace(0, 1, 4)
  corr_outlier: 'no'
  aggreg: 'mon' # temporal aggregation of the input files
  domain: 'medcof' # spatial domain
  int_method: 'conservative_normed' # 'conservative_normed', interpolation method used before in <regrid_obs.py>
  quantiles: [0.3333333333333333, 0.6666666666666666] # quantiles of the year-to-year time series to be calculated and stored
  skillscore_reference: 'rand' # 'clim' or 'rand'; use either the climatological mean or randomly reshuffled observed time series as reference forcast for calculating the CPRSS
  nr_pseudo_mem: 25 # number of times the climatological mean or randomly reshuffled observarions are replicated along the "member" dimension to mimic a model ensemble representing the naiv climatological forecasts used as reference for calculating the CRPS Skill Score. Results are insensitive to variations in this value; the script has been tested for value=2 and 4.
  testlevel: 0.05 # options for methods estimating hindcast skill
  detrending: ['yes', 'no'] # yes or no, linear detrending of the gcm and obs time series prior to validation
  masked_variable_std: ['fwi', 'SPEI-3-M'] # list of variables on which a land-sea mask will be applied, setting values over sea to nan

# Set the lead-times for each model and version thereof, as well as for each aggregation window (currently 1 and 3 months)

# ECMWF SEAS5.1
ecmwf51:
  nr_mem: 25 # number of members to be considered in the verification
  years: [1981, 2023] # list containing the start and end years of the verification period for this model; refers to the first and the last year of the monthly model inits; may contain the combined hindcasts and forecasts; years must coincide with the years indicated in the name of model netCDF file generated by aggregate_hindcast.py
  lead_1mon: [[0], [1], [2], [3], [4], [5], [6]] # lead-months per season for an aggregation window of 1 month
  lead_2mon: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]] # lead-months per season for an aggregation window of 2 months
  lead_3mon: [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]] # lead-months per season for an aggregation window of 3 months
  lead_4mon: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]] # lead-months per season for an aggregation window of 4 months
  lead_5mon: [[0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6]] # lead-months per season for an aggregation window of 5 months

# CMCC-SPS3.5 (System 35 in CDS)
cmcc35:
  nr_mem: 40
  years: [1993, 2023]
  lead_1mon: [[0], [1], [2], [3], [4], [5]]
  lead_2mon: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]] # lead-months per season for an aggregation window of 2 months
  lead_3mon: [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]]
  lead_4mon: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]] # lead-months per season for an aggregation window of 4 months
  lead_5mon: [[0, 1, 2, 3, 4], [1, 2, 3, 4, 5]] # lead-months per season for an aggregation window of 5 months

# CMCC-SPS4 (System 4 in CDS)
cmcc4:
  nr_mem: 30
  years: [1993, 2023]
  lead_1mon: [[0], [1], [2], [3], [4], [5]]
  lead_2mon: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]] # lead-months per season for an aggregation window of 2 months
  lead_3mon: [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]]
  lead_4mon: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]] # lead-months per season for an aggregation window of 4 months
  lead_5mon: [[0, 1, 2, 3, 4], [1, 2, 3, 4, 5]] # lead-months per season for an aggregation window of 5 months

# ECCC System 5, based on the CanESM5.1p1bc atmosphere and terrestial ecosystem coupled model
# see https://confluence.ecmwf.int/display/CKB/Description+of+CanESM5.1p1bc-v20240611+C3S+contribution
eccc5:
  nr_mem: 20
  years: [1993, 2023]
  lead_1mon: [[0], [1], [2], [3], [4], [5], [6]]
  lead_2mon: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]] # lead-months per season for an aggregation window of 2 months
  lead_3mon: [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]
  lead_4mon: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]] # lead-months per season for an aggregation window of 4 months
  lead_5mon: [[0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6]] # lead-months per season for an aggregation window of 5 months

# Set season labels for different aggregation periods
season_labels:
  1mon: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
  2mon: ['DJ', 'JF', 'FM', 'MA', 'AM', 'MJ', 'JJ', 'JA', 'AS', 'SO', 'ON', 'ND']
  3mon: ['DJF', 'JFM', 'FMA', 'MAM', 'AMJ', 'MJJ', 'JJA', 'JAS', 'ASO', 'SON', 'OND', 'NDJ']
  4mon: ['DJFM', 'JFMA', 'FMAM', 'MAMJ', 'AMJJ', 'MJJA', 'JJAS', 'JASO', 'ASON', 'SOND', 'ONDJ', 'NDJF']
  5mon: ['DJFMA', 'JFMAM', 'FMAMJ', 'MAMJJ', 'AMJJA', 'MJJAS', 'JJASO', 'JASON', 'ASOND', 'SONDJ', 'ONDJF', 'NDJFM']

# Set month definitions for different aggregation periods
seasons:
  1mon: [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]] # 1 month
  2mon: [[12, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12]] # 2 months
  3mon: [[12, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10], [9, 10, 11], [10, 11, 12], [11, 12, 1]] # 3 months
  4mon: [[12, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9], [7, 8, 9, 10], [8, 9, 10, 11], [9, 10, 11, 12], [10, 11, 12, 1], [11, 12, 1, 2]] # 4 months
  5mon: [[12, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [6, 7, 8, 9, 10], [7, 8, 9, 10, 11], [8, 9, 10, 11, 12], [9, 10, 11, 12, 1], [10, 11, 12, 1, 2], [11, 12, 1, 2, 3]] # 5 months
